name: build

on:
  push:
    branches:
      - master
      - develop
    tags:
      - v*
  pull_request:
    branches: [ master, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  GIT_SUBMODULE_STRATEGY: recursive

permissions:
  contents: write

jobs:

  # build-android:
  #  name: "Android"
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #      with:
  #        submodules: true
  #    - uses: actions/setup-java@v1
  #      with: { java-version: '11' }

  #    - name: Install ubuntu packages
  #      run: sudo apt-get update && sudo apt-get install build-essential cmake ninja-build

  #    - name: Gradle build
  #      working-directory: examples/AUI.Example.Views/android
  #      run: ./gradlew assembleDebug

  build-desktop:
    name: ${{ matrix.os }} ${{ matrix.shared_or_static }} ${{ matrix.debug_or_release }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        debug_or_release: [Debug, Release]
        shared_or_static: [shared, static]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            additional_cmake_args: '-A x64'
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            additional_cmake_args: ''

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install pkg-config libglew-dev zlib1g-dev libssl-dev libcrypt-dev libcurl4-openssl-dev libgtk-3-dev libfontconfig-dev
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -G "${{ matrix.generator }}" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.debug_or_release}} -DBUILD_SHARED_LIBS=${{ matrix.shared_or_static == 'shared' && 'ON' || 'OFF' }} ${{matrix.additional_cmake_flags}}

      - name: Build project
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.debug_or_release}}

      - name: Pack
        working-directory: ${{github.workspace}}/build
        run: cpack . -C ${{ matrix.debug_or_release }}

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: ${{github.workspace}}/build/*.tar.gz
          name: ${{ matrix.os }} ${{ matrix.shared_or_static }} ${{ matrix.debug_or_release }}

  release:
    #if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build-desktop

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          name: ${{ steps.extract_branch.outputs.branch }}
          tag: ${{ github.ref }}
          commit: ${{ steps.extract_branch.outputs.branch }}

  publish:
    #if: contains(github.ref, 'tags/v')
    name: Publish ${{ matrix.os }} ${{ matrix.shared_or_static }} ${{ matrix.debug_or_release }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        debug_or_release: [Debug, Release]
        shared_or_static: [shared, static]

    needs: release
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          path: ./
          name: ${{ matrix.os }} ${{ matrix.shared_or_static }} ${{matrix.debug_or_release }}

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Upload Release
        id: create_release
        uses: ncipollo/release-action@v1.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          name: ${{ steps.extract_branch.outputs.branch }}
          tag: ${{ github.ref }}
          commit: ${{ steps.extract_branch.outputs.branch }}
          artifacts: "*.tar.gz"